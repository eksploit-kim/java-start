// 배열 사용
// 인덱스
// 배열은 변수와 사용법이 비슷한데, 차이점이 있다면 다음과 같이 [] 사이에 숫자 번호를 넣어주면 된다.
// 배열의 위치를 나타내는 숫자를 인덱스(index)라 한다.

// 배열은 0부터 시작한다.
// new int[5]와 같이 5개의 요소를 가지는 int 형 배열을 만들었다면 인덱스는 0, 1, 2, 3, 4가 존재한다.
// 여기서 주의해야할 점이 있는데 인덱스는 0부터 시작한다는 것이다. 배열의 요소를 5개 생성했지만, 인덱스는 0부터 시작한다.
// 따라서 사용 가능한 인덱스의 범위는 0 ~ (n-1)이 된다. 그래서 students[4]가 배열의 마지막 요소이다.

// 기본형 vs 참조형
// 자바의 변수 데이터 타입을 가장 크게 보면 기본형과 참조형으로 분류할 수 있다.
// 사용하는 값을 직접 넣을 수 있는 기본형,
// 그리고 방금 본 배열 변수와 같이 메모리의 참조값을 넣을 수 있는 참조형으로 분류할 수 있다.
// - 기본형(Primary Type): 우리가 지금까지 봤던 int, long, double, boolean 처럼 변수에 사용할 값을 직접 넣을 수 있는 데이터 타입을 기본형이라 한다.
// - 참조형(Reference Type): int[] students 와 같이 데이터에 접근하기 위한 참조(주소)를 저장하는 데이터 타입을 참조형이라 한다.
// 뒤에서 학습하는 객체나 클래스를 담을 수 있는 변수들도 참조형이다.

// 배열 리팩토링
// 배열 리팩토링 - 변수 값 사용
// 변수명이 students 로 같기 때문에 숫자가 반복되는 부분만 해결하면 반복문을 도입할 수 있다. for 문을 사용해서 문제를 해결해보자.

// 참고: 리팩토링
// 리팩토링(Refactoring)은 기존의 코드 기능은 유지하면서 내부 구조를 개선하여 가독성을 높이고, 유지보수를 용이하게 하는 과정을 뜻한다.
// 이는 중복을 제거하고, 복잡성을 줄이며, 이해하기 쉬운 코드로 만들기 위해 수행된다.
// 리팩토링은 버그를 줄이고, 프로그램릐 성능을 향상시킬 수도 있으며, 코드의 설계를 개선하는 데에도 도움이 된다.
// 쉽게 이야기해서 작동하는 기능은 똑같은데, 코드를 개선하는 것을 리팩토링이라 한다.

package javaStart.array;

public class Array1Ref2 {
    public static void main(String[] args) {
        int[] students; // 배열 변수 선언
        students = new int[5]; // 배열 생성

        // 변수 값 대입
        students[0] = 90; // 0번 인덱스
        students[1] = 80;
        students[2] = 70;
        students[3] = 60;
        students[4] = 50;

        // 변수 값 사용
        for (int i = 0; i < students.length; i++) { // 0부터 배열의 길이 반환
            System.out.println("학생" + (i + 1) + " 점수: " + students[i]);
        }
    }
}

// System.out.println(students.length) -> 5가 출력된다.
// - 배열의 길이를 제공하는 특별한 기능이다.
// - 참고로 이 값은 조회만 할 수 있다. 대입은 할 수 없다.
// - 현재 배열의 크기는 5이기 때문에 여기서는 5가 출력된다.
